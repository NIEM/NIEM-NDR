#############################################################################
# Don't touch these...
#############################################################################

this_makefile := ${lastword ${MAKEFILE_LIST}}
SHELL = @bash@ -o pipefail -o errexit -o nounset
.SECONDARY:

#HELP:Default target is "all"
.DEFAULT_GOAL = all

#############################################################################
# autoconf/configure standard things
INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_DATA = @INSTALL_DATA@
MKDIR_P = @MKDIR_P@
SED = @SED@

#############################################################################
# local things identified by autoconf/configure

# Unix stuff
aspell = @aspell@
base64 = @base64@
chmod = @chmod@
cp = @cp@
diff = @diff@
find = @find@
egrep = @egrep@
grep = @grep@
head = @head@
identify = @identify@ # from ImageMagick
m4 = @m4@
touch = @touch@

# doc-processing
check_doc = @check_doc@
process_doc = @process_doc@
doc_to_schematron = @doc_to_schematron@

# schematron
schematron = @schematron@
schematron_compile = @schematron_compile@
schematron_execute = @schematron_execute@

# XML
check_xml = @check_xml@

#############################################################################
# variables

doc_name = niem-ndr
publish_dir = publish
temp_dir = tmp
tokens_dir = ${temp_dir}/tokens
valid_dir = ${tokens_dir}/valid

conformance_targets = ref ext ins set

sch_files = \
  ${conformance_targets:%=${publish_dir}/ndr-rules-conformance-target-%.sch} \
  ${publish_dir}/ctas-conformant-document.sch

all_files = \
  ${publish_dir}/${doc_name}.html \
  ${publish_dir}/${doc_name}.txt \
  ${publish_dir}/ndr-functions.xsl \
  ${publish_dir}/ctas-conformant-document.sch \
  ${publish_dir}/ctas-conformant-document.sch.xsl \
  ${publish_dir}/appinfo.xsd \
  ${publish_dir}/structures.xsd \
  ${publish_dir}/ndr-id-map.xml \
  ${sch_files} \
  ${sch_files:%.sch=%.sch.xsl} \

xml_files = \
  ${filter %.xml,${all_files}} \
  ${filter %.xsd,${all_files}} \
  ${filter %.sch,${all_files}} \
  ${filter %.xsl,${all_files}} \

xsd_files = ${filter %.xsd,${all_files}}

# checks to make sure that the source is sane
pre_valid_tokens = \
  ${valid_dir}/doc/${ndr_doc_xml} \
  ${valid_dir}/ndr-rules/${ndr_doc_xml} \

valid_tokens = \
  ${valid_dir}/spelling-ok/publish/${doc_name}.txt \
  ${all_files:%=${valid_dir}/macros-eliminated/%} \
  ${xml_files:%=${valid_dir}/xml/%} \
  ${xsd_files:%=${valid_dir}/same/%} \

# the NDR document with macros expanded
ndr_doc_xml = ${temp_dir}/ndr-doc.xml

schema_dir = xsd/ndr-examples
ndr_macros_m4 = src/ndr-macros.m4

check_doc_flags = --catalog=${schema_dir}/xml-catalog.xml
process_doc_flags = --catalog=${schema_dir}/xml-catalog.xml --not-paranoid
m4_flags = --prefix-builtins lib/m4-setup.m4

#############################################################################
#HELP:Targets:


#############################################################################
# dependency inclusion: generated dependencies for things derived from the NDR doc

depend_mk := dependencies.mk
build_dependencies = false

ifeq (${build_dependencies},true) # it's OK to build dependencies

# convenience target to build dependencies only if needed
.PHONY: depend
depend: ${depend_mk}

${depend_mk}: ${ndr_doc_xml}
	${MKDIR_P} ${dir $@}
	${process_doc} ${process_doc_flags} --format=makedepend --in=$< --out=$@

else

${depend_mk}: ${ndr_doc_xml}
	@ echo "Warning: Dependencies are out of date. 'make depend' to rebuild dependencies." >&2

.PHONY: depend #  Force rebuild of dependencies
depend:
	${RM} ${depend_mk}
	${MAKE} ${depend_mk} build_dependencies=true

endif

ifeq (${wildcard ${depend_mk}},${depend_mk}) # use existing dependencies
  include ${depend_mk}
else
  ${warning No dependencies present. 'make depend' to build dependencies}
endif

# end dependency inclusion
#############################################################################

.PHONY: all #  Generate everything
all: ${all_files}

#############################################################################
# products

${publish_dir}/${doc_name}.html: ${ndr_doc_xml} ${doc_html_required_files}
	@ ${MKDIR_P} ${dir $@}
	${process_doc} ${process_doc_flags} --in=$< --out=$@

${publish_dir}/${doc_name}.txt: ${ndr_doc_xml} ${doc_text_required_files}
	@ ${MKDIR_P} ${dir $@}
	${process_doc} ${process_doc_flags} --format=text --in=$< --out=$@

${ndr_doc_xml}: ${ndr_macros_m4} src/ndr-doc.xml.m4 
	@ ${RM} $@
	@ ${MKDIR_P} ${dir $@}
	${m4} ${m4_flags} ${ndr_macros_m4} src/ndr-doc.xml.m4 | ${SED} -e 's/  *$$//' > $@
	@ ${chmod} -w $@
	@ if ${grep} -n 'MACRO' $@; then printf 'ERROR: unresolved M4 macro.\n' >&2; exit 1; fi
	if ${egrep} -nH ' +$$' $@; then printf 'ERROR: stray whitespace in document' >&2; exit 1; fi

${publish_dir}/ndr-rules-conformance-target-%.sch: ${ndr_doc_xml}
	@ ${MKDIR_P} ${dir $@}
	${doc_to_schematron} --blurb-set=$* --out=$@ $<

${publish_dir}/ndr-id-map.xml: ${ndr_doc_xml}
	@ ${MKDIR_P} ${dir $@}
	${process_doc} ${process_doc_flags} --format=rules-id-map --in=$< --out=$@

${publish_dir}/%: ${temp_dir}/%
	@ ${MKDIR_P} ${dir $@}
	${cp} $< $@

${publish_dir}/%.sch.xsl: ${publish_dir}/%.sch
	${schematron_compile} --output-file=$@ $<

# # temp_dir

${temp_dir}/%: src/%.m4
	@ ${MKDIR_P} ${dir $@}
	${m4} ${m4_flags} ${ndr_macros_m4} $< > $@
	@ if ${grep} -n 'MACRO' $@; then printf 'ERROR: unresolved M4 macro.\n' >&2; exit 1; fi

${temp_dir}/%: src/%
	@ ${MKDIR_P} ${dir $@}
	${cp} $< $@

${temp_dir}/img/%.png.width.txt: ${temp_dir}/img/%.png
	@ ${MKDIR_P} ${dir $@}
	${identify} -format '%w' $< > $@

# end products
#############################################################################
# valid

.PHONY: valid #  validate what can be validated
valid: ${valid_tokens}

.PHONY: pre-valid #  validate inputs to the doc processing system (paranoia)
pre-valid: ${pre_valid_tokens}

${valid_dir}/macros-eliminated/%: %
	! ${grep} 'MACRO_' $< > /dev/null
	@ ${MKDIR_P} ${dir $@} && touch $@

${valid_dir}/xml/%: %
	${check_xml} $<
	@ ${MKDIR_P} ${dir $@} && touch $@

# pre-valid checks

${valid_dir}/doc/%: %
	${check_doc} ${check_doc_flags} $<
	@ ${MKDIR_P} ${dir $@} && ${touch} $@

${valid_dir}/ndr-rules/%: % ${temp_dir}/ndr-rules.sch.xsl
	${schematron_execute} --xslt-file=${temp_dir}/ndr-rules.sch.xsl --format=text $<
	@ ${MKDIR_P} ${dir $@} && ${touch} $@

${valid_dir}/same/publish/appinfo.xsd: ${publish_dir}/appinfo.xsd ./xsd/ndr-examples/niem/utility/appinfo.xsd
	${diff} $^
	@ ${MKDIR_P} ${dir $@} && ${touch} $@

${valid_dir}/same/publish/structures.xsd: ${publish_dir}/structures.xsd ./xsd/ndr-examples/niem/utility/structures.xsd
	${diff} $^
	@ ${MKDIR_P} ${dir $@} && ${touch} $@

${valid_dir}/spelling-ok/%: ${temp_dir}/spell-results/%
	@ while read -r -d$$'\n'; do \
	  echo "SPELLING: WORD NOT FOUND: $$REPLY"; \
	  ${grep} -n --context=1 "$$REPLY" $*; \
	done < $<
	! [[ -s $< ]]
	@ ${MKDIR_P} ${dir $@} && ${touch} $@

${temp_dir}/spell-results/%: % aspell-exceptions.txt
	@ ${MKDIR_P} ${dir $@}
	${aspell} --home-dir=. -p aspell-exceptions.txt list < $< | sort -uf > $@

# end valid
#############################################################################



.PHONY: clean #  Remove all regular build products
clean:
	${RM} -r ${temp_dir}
	${RM} ${all_files}

#############################################################################
# make this the last target

.PHONY: help #  Print this help
help:
	@ ${SED} -e '/^\.PHONY:/s/^\.PHONY: *\([^ #]*\) *\#\( *\)\([^ ].*\)/\2\1: \3/p;/^[^#]*#HELP:/s/[^#]*#HELP:\(.*\)/\1/p;d' ${this_makefile}

# don't put anything after this
