#!/usr/bin/env bash

set -o errexit +o nounset

THIS="$0"
DISTRO_ROOT="$(cd "$(dirname "$0")"/..; pwd)"
SAXON_JAR=$DISTRO_ROOT/lib/saxon9he.jar

#HELP:schematron: run a Schematron schema on a set of XML files
#HELP:Usage: schematron --schema=schema1.sch --schema=schema2.sch file1.xml file2.xml ...
#HELP:Options:

fail () {
    printf '%s: %s\n' "$THIS" "$*" >&2
    exit 1
}

ensure () {
    MESSAGE="$1"
    shift
    if ! "$@"
    then fail "$MESSAGE"
    fi
}

vprintf () {
    if test "$VERBOSE" = true
    then printf "$@" >&2
    fi
}

get_xsl_name_from_schematron_name () {
    printf '%s/tmp.%s.%s.xsl' "$(dirname "$1")" "$(basename "$1")" "$MODE"
}

#HELP:  --help | -h: print this help
opt_help () {
    sed -e 's/^.*#''HELP://p;d' "$0"
    exit 0
}

#HELP:  --not-paranoid: don't check file formats and other details
PARANOID=true
opt_not_paranoid () {
    PARANOID=false
}

#HELP:  --schema=$schema.sch | -s $schema.sch: Test files against Schematron file
SCHEMATRONS=()
opt_schema () {
    SCHEMATRONS+=("$1")
}

#HELP:  --svrl: provide ouput as SVRL XML (default is text)
MODE=text
opt_svrl () {
    MODE=svrl
}

#HELP:  --verbose | -v: Be verbose; print debugging and progress output
VERBOSE=false
opt_verbose () {
    VERBOSE=true
}

#HELP:  --param=$variable=$value | -p $variable=$value: set XSLT parameter
#HELP:    e.g., --param=+xml-catalog=subset/xml-catalog.xml
PARAMS=()
opt_param () {
    PARAMS+=("$1")
}

#HELP:  --force-rebuild: Always rebuild XSLTs from Schematrons, even if they have not changed.
FORCE_REBUILD=false
opt_force_rebuild () {
    FORCE_REBUILD=true
}

OPTIND=1
while getopts :hp:s:v-: option
do
    case "$option" in
        h ) opt_help;;
        p ) opt_param "$OPTARG";;
        s ) opt_schema "$OPTARG";;
        v ) opt_verbose;;
        - )
            case "$OPTARG" in
                help ) opt_help;;
                force-rebuild ) opt_force_rebuild;;
                not-paranoid ) opt_not_paranoid;;
                param=* ) opt_param "${OPTARG#*=}";;
                schema=* ) opt_schema "${OPTARG#*=}";;
                svrl ) opt_svrl;;
                verbose ) opt_verbose;;
                schema | param ) fail "long option \"$OPTARG\" requires argument";;
                help=* | force-rebuild=* | not-paranoid=* | svrl=* | verbose=* )
                    fail "option \"${OPTARG%=*}\" does not take an argument" ;;
                * ) fail "unknown long option \"$OPTARG\"";;
            esac;;
        '?' ) fail "unknown short option \"$OPTARG\"";;
        : ) fail "short option \"$OPTARG\" missing argument";;
        * ) fail "bad state OPTARG=\"$OPTARG\"";;
    esac
done
shift $((OPTIND-1))

ensure 'At least one --schema option required' test ${#SCHEMATRONS[@]} != 0
ensure 'At least one file to validate is required' test $# != 0

if test "$VERBOSE" = true
then {
    printf 'Schemas:'
    printf ' "%s"' "${SCHEMATRONS[@]}"
    printf '\n'
    printf 'Files to validate:'
    printf ' "%s"' "$@"
    printf '\n' 
    } >&2
fi

if test "$PARANOID" = true
then for schema in "${SCHEMATRONS[@]}"
    do vprintf 'Checking if schema "%s" is a file\n' "$schema"
        ensure "$(printf 'Schema "%s" must be a file' "$schema")" test -f "$schema"
        vprintf 'Checking if schema "%s" is Schematron\n' "$schema"
        ensure "$(printf 'Schema "%s" must be Schematron' "$schema")" \
            java -jar "$DISTRO_ROOT"/lib/jing.jar -c "$DISTRO_ROOT/lib/iso-schematron.rnc" "$schema"
    done
    for file in "$@"
    do vprintf 'Checking if file "%s" is a file\n' "$file"
        ensure "$(printf 'File "%s" must be a file' "$file")" test -f "$file"
    done
fi

for SCHEMA in "${SCHEMATRONS[@]}"
do SCHEMA_DIR=$(dirname "$SCHEMA")
    SCHEMA_BASE=$(basename "$SCHEMA")
    INCLUDE=$SCHEMA_DIR/tmp.$SCHEMA_BASE.include.xml
    ABSTRACT=$SCHEMA_DIR/tmp.$SCHEMA_BASE.abstract.xml
    XSL=$(get_xsl_name_from_schematron_name "$SCHEMA")
    if test "$FORCE_REBUILD" = true -o "$INCLUDE" -ot "$SCHEMA"
    then vprintf 'Rebuilding "%s" from "%s" using "%s"\n' "$INCLUDE" "$SCHEMA" "iso_dsdl_include.xsl"
        java -jar "$SAXON_JAR" -o:"$INCLUDE" -xsl:"$DISTRO_ROOT"/lib/schematron-xslt/iso_dsdl_include.xsl "$SCHEMA"
    else vprintf 'No need to rebuild "%s"\n' "$INCLUDE"
    fi
    if test "$FORCE_REBUILD" = true -o "$ABSTRACT" -ot "$INCLUDE"
    then vprintf 'Rebuilding "%s" from "%s" using "%s"\n' "$ABSTRACT" "$INCLUDE" iso_abstract_expand.xsl
        java -jar "$SAXON_JAR" -o:"$ABSTRACT" -xsl:"$DISTRO_ROOT"/lib/schematron-xslt/iso_abstract_expand.xsl "$INCLUDE"
    else vprintf 'No need to rebuild "%s"\n' "$ABSTRACT"
    fi
    if test "$FORCE_REBUILD" = true -o "$XSL" -ot "$ABSTRACT"
    then
        case "$MODE" in
            text )
                vprintf 'Rebuilding "%s" from "%s" using "%s"\n' "$XSL" "$ABSTRACT" iso_schematron_text.xsl
                java -jar "$SAXON_JAR" -o:"$XSL" -xsl:"$DISTRO_ROOT"/lib/schematron-xslt/iso_schematron_text.xsl "$ABSTRACT" allow-foreign=true diagnose=true generate-paths=true path-format=1
            ;;
            svrl )
                vprintf 'Rebuilding "%s" from "%s" using "%s"\n' "$XSL" "$ABSTRACT" iso_svrl_for_xslt2.xsl
                java -jar "$SAXON_JAR" -o:"$XSL" -xsl:"$DISTRO_ROOT"/lib/schematron-xslt/iso_svrl_for_xslt2.xsl "$ABSTRACT" allow-foreign=true
            ;;
            * ) fail "internal error: unknown mode \"$MODE\"";
        esac
    else vprintf 'No need to rebuild "%s"\n' "$XSL"
    fi
done

vprintf 'Validating files\n'

for FILE in "$@"
do for SCHEMA in "${SCHEMATRONS[@]}"
    do vprintf 'Checking file "%s" against schema "%s"\n' "$FILE" "$SCHEMATRONS"
        java -jar "$SAXON_JAR" -l:on -xsl:"$(get_xsl_name_from_schematron_name "$SCHEMA")" "$FILE" "${PARAMS[@]}"
    done
done
