#!/usr/bin/env bash

set -o errexit +o nounset

THIS="$0"
DISTRO_ROOT="$(cd "$(dirname "$0")"/..; pwd)"

COMMAND=("$DISTRO_ROOT/bin/schematron")

#HELP:test-rules: run an NDR rule set on a set of XML files
#HELP:Usage: test-rules (--conformance-target=$code)+ ($file.xml)+
#HELP:Options:

fail () {
    printf '%s: %s\n' "$THIS" "$*" >&2
    exit 1
}

ensure () {
    MESSAGE="$1"
    shift
    if ! "$@"
    then fail "$MESSAGE"
    fi
}

#HELP:  --help | -h: print this help
opt_help () {
    sed -e 's/^.*#''HELP://p;d' "$0"
    exit 0
}

#HELP:  --not-paranoid: don't check file formats and other details
opt_not_paranoid () {
    COMMAND+=("--not-paranoid")
}

#HELP:  --conformance-target=$code | -t $code: Test files against NDR rules for
#HELP:       conformance target. At least one conformance target is required.
IS_CONFORMANCE_TARGET_SET=false
opt_conformance_target () {
    RULES_FILE="$DISTRO_ROOT/ndr-rules-conformance-target-$1.sch"
    ensure "$(printf "Can't find rules file for target \"%s\"" "$1")" test -f "$RULES_FILE"
    COMMAND+=("--schema=$RULES_FILE")
    IS_CONFORMANCE_TARGET_SET=true
}

#HELP:  --verbose | -v: Be verbose; print debugging and progress output
opt_verbose () {
    COMMAND+=("--verbose")
}

#HELP:  --xml-catalog=$file.xml | -c $file.xml: Use XML catalog
IS_XML_CATALOG_SET=false
opt_xml_catalog () {
    ensure 'Only one xml catalog allowed' test "$IS_XML_CATALOG_SET" = false
    COMMAND+=("--param=+xml-catalog=$1")
    IS_XML_CATALOG_SET=true
}

OPTIND=1
while getopts :ht:vc:-: option
do
    case "$option" in
        h ) opt_help;;
        t ) opt_conformance_target "$OPTARG";;
        v ) opt_verbose;;
        c ) opt_xml_catalog "$OPTARG";;
        - )
            case "$OPTARG" in
                help ) opt_help;;
                not-paranoid ) opt_not_paranoid;;
                conformance-target=* ) opt_conformance_target "${OPTARG#*=}";;
                verbose ) opt_verbose;;
                xml-catalog=* ) opt_xml_catalog "${OPTARG#*=}";;
                conformance-target | xml-catalog ) fail "long option \"$OPTARG\" requires argument";;
                * ) fail "unknown long option \"$OPTARG\"";;
            esac;;
        '?' ) fail "unknown short option \"$OPTARG\"";;
        : ) fail "short option \"$OPTARG\" missing argument";;
        * ) fail "bad state OPTARG=\"$OPTARG\"";;
    esac
done
shift $((OPTIND-1))

ensure 'At least one conformance target is required' test "$IS_CONFORMANCE_TARGET_SET" = true
ensure 'An xml catalog is required' test "$IS_XML_CATALOG_SET" = true
ensure 'At least one file to validate is required' test $# != 0

"${COMMAND[@]}" "$@"
