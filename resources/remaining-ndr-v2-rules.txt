  <section>
    <title>Unsorted rules</title>

    <rule applicability="REF SUB EXT">
      <p>Within the schema, the value of the required attribute <code>targetNamespace</code> on the document element <code>xsd:schema</code> MUST match the production <code>&lt;absolute-URI&gt;</code> as defined by <ref idref="RFC3986"/>.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>Within the schema, the document element <code>xsd:schema</code> MUST carry the attribute <code>version</code>.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>Within the schema, the value of the required attribute <code>version</code> on the document element <code>xsd:schema</code> MUST NOT be an empty string.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>Within the schema, the element <code>xsd:import</code> MUST carry the attribute <code>namespace</code>.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>Within the schema, the value of the required attribute <code>namespace</code> owned by the element <code>xsd:import</code> MUST match the production <code>&lt;absolute-URI&gt;</code> as defined by <ref idref="RFC3986"/>.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>Within the schema, the element <code>xsd:import</code> MUST carry the attribute <code>schemaLocation</code>.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>Within the schema, the value of the required attribute <code>schemaLocation</code> carried by the element <code>xsd:import</code> MUST match either the production <code>&lt;absolute-URI&gt;</code> or the definition of <q>
          <em>relative-path reference</em>,</q> as defined by <ref idref="RFC3986"/>.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>Within the schema, the value of the required attribute <code>schemaLocation</code> carried by the element <code>xsd:import</code> MUST be resolvable to a XML schema document file that is valid according to <ref idref="XMLSchemaStructures"/> and <ref idref="XMLSchemaDatatypes"/>.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>Within the schema, when a namespace other than the XML namespace or the XML Schema namespace is used, it MUST be imported into the schema using the <code>xsd:import</code> element.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>Within the schema, when a namespace other than the XML namespace or the XML Schema namespace is used, its content MUST be valid with respect to the schema imported for that namespace.</p>
    </rule>
    <rule applicability="REF EXT">
      <p>Within the schema, an element SHALL have at most one instance of an element <code>xsd:annotation</code> as an immediate child.</p>
    </rule>
    <rule applicability="REF EXT">
      <p>Within theschema, the content of the <code>xsd:documentation</code> element that constitutes the data definition of a component MUST be character information items as specified by <ref idref="XMLInfoSet"/>.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>XML comments SHALL not be used for persistent information about constructs within the schema.</p>
    </rule>
    <rule applicability="REF EXT">
      <p>Within the schema, any immediate child of an <code>xsd:appinfo</code> element SHALL be an element information item or a comment information item.</p>
    </rule>
    <rule applicability="REF EXT">
      <p>Within the schema, any element that is an immediate child of an <code>xsd:appinfo</code> element SHALL be in a namespace.</p>
    </rule>
    <rule applicability="REF EXT">
      <p>Within the schema, an element in the XML Schema namespace MUST NOT occur as a descendant of any element <code>xsd:appinfo</code>.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>Within the schema, the element <code>xsd:complexType</code> MUST have as an immediate child either the element <code>xsd:complexContent</code> or the element <code>xsd:simpleContent</code>.</p>
    </rule>
    <rule applicability="REF">
      <p>Within the schema, the element <code>xsd:simpleContent</code> MUST have as an immediate child the element <code>xsd:extension</code>.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>Within the schema, given an element <code>xsd:simpleContent</code> with a child <code>xsd:extension</code> owning an attribute <code>base</code>, if the attribute <code>base</code> has a value that resolves to the name of a simple type, then the element <code>xsd:extension</code> MUST have an immediate child element <code>xsd:attributeGroup</code>.</p>
    </rule>
    <rule applicability="REF">
      <p>Within the schema, the element <code>xsd:complexContent</code> MUST have as an immediate child the element <code>xsd:extension</code>.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>Within the schema, given an element <code>xsd:complexContent</code> with a child <code>xsd:extension</code> owning an attribute <code>base</code>, the attribute <code>base</code> MUST have a value that resolves to the name of one of the following:</p>
      <ol>
        <li>
          <p>The type <code>structures:ComplexObjectType</code>.</p>
        </li>
        <li>
          <p>The type <code>structures:MetadataType</code>.</p>
        </li>
        <li>
          <p>The type <code>structures:AugmentationType</code>.</p>
        </li>
        <li>
          <p>A complex type that is a NIEM-conformant component.</p>
        </li>
      </ol>
    </rule>
    <rule applicability="EXT">
      <p>Within the schema, given an element <code>xsd:complexContent</code> with a child <code>xsd:restriction</code> owning an attribute <code>base</code>, the attribute <code>base</code> MUST have a value that resolves to the name of a complex type that is a NIEM-conformant component.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>Within the schema, any occurrence of the element <code>xsd:attributeGroup</code> MUST own an attribute <code>ref</code>.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>Within the schema, the attribute <code>ref</code> owned by any element <code>xsd:attributeGroup</code> MUST have a value of a qualified name (possibly using the default namespace) that SHALL resolve to the namespace for the NIEM <code>structures</code> namespace and the local name <code>SimpleObjectAttributeGroup</code>.</p>
    </rule>
    <rule applicability="REF EXT">
      <p>Within the schema, the document element <code>xsd:schema</code> MUST have application information <code>appinfo:ConformantIndicator</code>, with text content <code>
          <q>true</q>
        </code>.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>Two XML Schema documents SHALL have the same value for attribute <code>targetNamespace</code> carried by the element <code>xsd:schema</code>, if and only if they represent the same set of components.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>Two XML Schema documents SHALL have the same value for attribute <code>targetNamespace</code> carried by the element <code>xsd:schema</code>, and different values for attribute <code>version</code> carried by the element <code>xsd:schema</code> if and only if they are different views of the same set of components.</p>
    </rule>
    <rule applicability="REF EXT">
      <p>Words or synonyms for the words within a data element definition SHALL NOT be reused as terms in the corresponding component name if those words dilute the semantics and understanding of, or impart ambiguity to, the entity or concept that the component represents.</p>
    </rule>
    <rule applicability="REF EXT">
      <p>An object class SHALL have one and only one associated semantic meaning (i.e., a single word sense) as described in the definition of the component that represents that object class.</p>
    </rule>
    <rule applicability="REF EXT">
      <p>An object class SHALL NOT be redefined within the definitions of the components that represent properties or subparts of that entity or class.</p>
    </rule>
    <rule applicability="REF EXT">
      <p>A data definition SHALL NOT contain explicit representational or data typing information such as number characters, type of characters, etc., unless the very nature of the component can be described only by such information.</p>
    </rule>
    <rule applicability="REF EXT">
      <p>A component definition SHALL begin with a standard opening phrase that depends on the class of the component per Table 7-1: Standard Opening Phrases:</p>
    </rule>
    <definition term="appinfo namespace">
      <p>The <strong>appinfo namespace</strong> is the namespace represented by the URI <em>
          <q>http://niem.gov/niem/appinfo/2.0</q>
        </em>.</p>
    </definition>
    <rule applicability="REF EXT">
      <p>The schema SHALL import the <code>appinfo</code> namespace.</p>
    </rule>
    <definition term="application information">
      <p>A component is said to have <strong>application information</strong> of some element E when the root element that defines the component has an immediate child element <code>xsd:annotation</code>, which has an immediate child element <code>xsd:appinfo</code>, which has as an immediate child the element <strong>E</strong>.</p>
    </definition>
    <definition term="deprecated component">
      <p>In a particular NIEM-conformant namespace, a <strong>deprecated component</strong> is one whose use is not recommended, yet which is maintained in the schema for compatibility with previous versions of the namespace.</p>
    </definition>
    <rule applicability="REF EXT">
      <p>A component that is deprecated SHALL be indicated as such by the component having application information <code>appinfo:Deprecated</code>, with an attribute <code>value</code> with a value of <code>true</code>.</p>
    </rule>
    <rule applicability="REF EXT">
      <p>Within the schema, the element <code>appinfo:Base</code> MAY be used in one of the following ways:</p>
      <ol>
        <li>
          <p>By a type definition, to indicate the base type, or <code>structures:Object</code> or <code>structures:Association</code>.</p>
        </li>
        <li>
          <p>By an element declaration, to indicate the base element.</p>
        </li>
      </ol>
      <p>The element <code>appinfo:Base</code> SHALL NOT be used for any other purpose.</p>
    </rule>
    <rule applicability="REF EXT">
      <p>Within the schema, the element <code>appinfo:Base</code> SHALL indicate, by namespace and name, one of the following:</p>
      <ol>
        <li>
          <p>A NIEM-conformant schema component.</p>
        </li>
        <li>
          <p>
            <code>structures:Object</code>.</p>
        </li>
        <li>
          <p>
            <code>structures:Association</code>.</p>
        </li>
      </ol>
    </rule>
    <rule applicability="REF EXT">
      <p>Within the schema, an attribute <code>appinfo:namespace</code> owned by an element <code>appinfo:Base</code> SHALL have a value of either of the following:</p>
      <ol>
        <li>
          <p>A namespace which is the target namespace of a NIEM-conformant schema.</p>
        </li>
        <li>
          <p>The <code>structures</code> namespace.</p>
        </li>              
      </ol>
    </rule>
    <rule applicability="REF EXT">
      <p>Within the schema, an element <code>appinfo:Base</code> that does not own an attribute <code>appinfo:namespace</code> SHALL refer to the target namespace of the schema in which it is used.</p>
    </rule>
    <rule applicability="REF EXT">
      <p>Within the schema, an element <code>appinfo:Base</code> SHALL own an attribute <code>appinfo:name</code>.</p>
    </rule>
    <rule applicability="REF EXT">
      <p>Within the schema, if an element <code>appinfo:Base</code> indicates a NIEM-conformant namespace, then the value of the attribute <code>appinfo:name</code> owned by the element <code>appinfo:Base</code> SHALL indicate a schema component in the indicated namespace.</p>
    </rule>
    <rule applicability="REF EXT">
      <p>Within the schema, if an element <code>appinfo:Base</code> indicates the <code>structures</code> namespace, then the value of the attribute <code>appinfo:name</code> owned by the element <code>appinfo:Base</code> SHALL have a value of one of the following:</p>
      <ol>
        <li>
          <p>
            <code>structures:Object</code>.</p>
        </li>
        <li>
          <p>
            <code>structures:Association</code>.</p>
        </li>
        <li>
          <p>A schema component defined by the <code>structures</code> schema.</p>
        </li>
      </ol>
    </rule>
    <rule applicability="REF EXT">
      <p>Within the schema, the element <code>appinfo:AppliesTo</code> MAY be used in any of the following ways:</p>
      <ol>
        <li>
          <p>To indicate a base type to which an augmentation may be applied.</p>
        </li>
        <li>
          <p>To indicate a base type to which a metadata type may be applied.</p>
        </li>
      </ol>
      <p>The element <code>appinfo:AppliesTo</code> SHALL NOT be used for any other purpose.</p>
    </rule>
    <rule applicability="REF EXT">
      <p>Within the schema, the element <code>appinfo:AppliesTo</code> SHALL indicate a schema component by namespace and name.</p>
    </rule>
    <rule applicability="REF EXT">
      <p>Within the schema, an attribute <code>appinfo:namespace</code> owned by an element <code>appinfo:AppliesTo</code> SHALL indicate the namespace of the type to which <code>appinfo:AppliesTo</code> refers. The indicated namespace SHALL be defined by a NIEM-conformant schema.</p>
    </rule>
    <rule applicability="REF EXT">
      <p>Given that the element <code>appinfo:AppliesTo</code> refers to a type, the applicability described by the element SHALL be understood to be the indicated type or a type transitively derived from the indicated type.</p>
    </rule>
    <rule applicability="REF EXT">
      <p>Within the schema, an element <code>appinfo:AppliesTo</code> that does not carry an attribute <code>appinfo:namespace</code> SHALL refer to the target namespace of the schema in which it is used.</p>
    </rule>
    <rule applicability="REF EXT">
      <p>Within the schema, an element <code>appinfo:AppliesTo</code> SHALL carry an attribute <code>appinfo:name</code>. The value of this attribute SHALL indicate the local name of a schema component within the namespace specified by the element.</p>
    </rule>
    <rule applicability="REF EXT">
      <p>Within the schema, the element <code>appinfo:ReferenceTarget</code> SHALL identify the XML Schema type definition of an element information item to which an instance of a reference element may validly refer. The element <code>appinfo:ReferenceTarget</code> SHALL NOT be used for any other purpose.</p>
    </rule>
    <rule applicability="REF EXT">
      <p>Within the schema, a reference element MUST have at most one instance of the element <code>appinfo:ReferenceTarget</code>.</p>
    </rule>
    <rule applicability="REF EXT">
      <p>Within the schema, the element <code>appinfo:ReferenceTarget</code> SHALL indicate a type definition schema component, by namespace and name.</p>
    </rule>
    <rule applicability="REF EXT">
      <p>Within the schema, an attribute <code>appinfo:namespace</code> carried by an element <code>appinfo:ReferenceTarget</code> SHALL indicate the namespace of the referenced schema component. The indicated namespace SHALL be defined by a reference or extension schema.</p>
    </rule>
    <rule applicability="REF EXT">
      <p>Within the schema, an element <code>appinfo:ReferenceTarget</code> that does not carry an attribute <code>appinfo:namespace</code> SHALL refer to the target namespace of the schema in which it is used.</p>
    </rule>
    <rule applicability="REF EXT">
      <p>Within the schema, an element <code>appinfo:ReferenceTarget</code> SHALL carry an attribute <code>appinfo:name</code>. The value of this attribute SHALL indicate the local name of a type definition schema component within the namespace specified by the element.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>Within the schema, a simple type definition that uses <code>xsd:list</code> SHOULD NOT be defined if any member of the list requires a property or metadata that is different than other members of the list. All members of the list SHOULD have the same metadata, and should be related via the same properties.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>Within the schema, a complex type definition SHALL be one of the following classes of types:</p>
      <ol>
        <li>
          <p>An object type.</p>
        </li>
        <li>
          <p>A role type.</p>
        </li>
        <li>
          <p>An association type.</p>
        </li>
        <li>
          <p>A metadata type.</p>
        </li>
        <li>
          <p>An augmentation type.</p>
        </li>
        <li>
          <p>An adapter type.</p>
        </li>
      </ol>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>Within the schema, an element MUST NOT be introduced more than once into the direct content of a type definition. This applies to content acquired through extension of base types. This does not apply to a base element or derived element to one previously existing in the type definition.</p>
    </rule>
    <definition term="object type">
      <p>In a NIEM-conformant schema, an <strong>object type</strong> is a complex type definition, an instance of which asserts the existence of an object. An object type represents some kind of object: a thing with its own lifespan that has some existence. The object may or may not be a physical object. It may be a conceptual object.</p>
    </definition>
    <rule applicability="REF EXT">
      <p>Within the schema, an object type SHALL be a complex type definition that either constitutes a NIEM-conformant component or for which there exists a NIEM-conformant component of one of the following forms:</p>
      <ol>
        <li>
          <p>Has simple content, is based on a simple type, and contains the attribute group <code>structures:SimpleObjectAttributeGroup</code>, and has application information <code>appinfo:Base</code> of <code>structures:Object</code>.</p>
        </li>
        <li>
          <p>Has complex content, and is based on complex type <code>structures:ComplexObjectType</code>, and has application information <code>appinfo:Base</code> of <code>structures:Object</code>.</p>
        </li>
        <li>
          <p>Is a complex type that is derived from an object type, which is defined according to this rule.</p>
        </li>
      </ol>
    </rule>
    <definition term="role type">
      <p>A <strong>role type</strong> is a type that represents a particular function, purpose, usage, or role of an object.</p>
    </definition>
    <definition term="RoleOf element">
      <p>In a NIEM-conformant schema, a <code>RoleOf</code> 
        <strong>element</strong> is a reference element whose type is the base type of the role.</p>
    </definition>
    <rule applicability="REF SUB EXT">
      <p>Within the schema, any element with a name beginning with the string <code>RoleOf</code> SHALL represent a base type, of which the containing type represents a role.</p>
    </rule>
    <definition term="association type">
      <p>In a NIEM-conformant schema, an <strong>association type</strong> is a type that establishes a relationship between objects, along with the properties of that relationship. An association type provides a structure that does not establish existence of an object but instead specifies relationships between objects.</p>
    </definition>
    <definition term="association">
      <p>In a NIEM-conformant schema, an <strong>association</strong> is an element whose type is an association type.</p>
    </definition>
    <rule applicability="REF EXT">
      <p>Within the schema, an association type SHALL be a complex type definition that either constitutes a NIEM-conformant component or for which there exists a NIEM-conformant component definition. The NIEM-conformant component definition SHALL have one of the following forms:</p>
      <ol>
        <li>
          <p>Has complex content, is based on the complex type <code>structures:ComplexObjectType</code>, and has application information <code>appinfo:Base</code> of <code>structures:Association</code>.</p>
        </li>
        <li>
          <p>Is a complex type that is derived from an association type, which is defined according to this rule.</p>
        </li>
      </ol>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>Given that an association type defines a relationship between a set of participants, within an association type definition, any element that represents a participant SHALL be a reference element.</p>
    </rule>
    <definition term="metadata type">
      <p>A <strong>metadata type</strong> describes data about data, that is, information that is not descriptive of objects and their relationships, but is descriptive of the data itself. It is useful to provide a general mechanism for data about data. This provides required flexibility to precisely represent information.</p>
    </definition>
    <definition term="metadata element">
      <p>Within a NIEM-conformant schema, a <strong>metadata element</strong> is an element whose type is a metadata type. There are specific limitations on the meaning of a metadata element in an instance; it does not establish existence of an object, nor is it a property of its containing object.</p>
    </definition>
    <rule applicability="REF SUB EXT">
      <p>Within the schema, a metadata type SHALL contain elements appropriate for a specific class of data about data.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>Within the schema, a metadata type and only a metadata type SHALL be derived directly from <code>structures:MetadataType</code>.</p>
    </rule>
    <rule applicability="REF EXT">
      <p>Within the schema, a metadata type MAY have application information <code>appinfo:AppliesTo</code>, indicating the NIEM-conformant object, association, or external adapter types to which the metadata applies.</p>
    </rule>
    <rule applicability="REF EXT">
      <p>Within the schema, a metadata type that does not have application information <code>appinfo:AppliesTo</code> MAY be applied to any object type, association type, or external adapter type.</p>
    </rule>
    <definition term="augmentation type">
      <p>An <strong>augmentation type</strong> is a complex type that provides a reusable block of data that may
        be added to object types or association types.</p>
    </definition>
    <definition term="augmentation">
      <p>An <strong>augmentation</strong> of a NIEM-conformant object type is a block of additional data added
        to an object type to carry additional data beyond that of the original object definition.</p>
    </definition>
    <rule applicability="REF SUB EXT">
      <p>An augmentation type:</p>
      <ol>
        <li>
          <p>SHALL be transitively derived from <code>structures:AugmentationType</code>.</p>
        </li>
        <li>
          <p>SHALL contain elements that represent properties to be applied to a base type.</p>
        </li>
      </ol>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>Within the schema, an augmentation element definition:</p>
      <ol>
        <li>
          <p>SHALL have a type that is an augmentation type.</p>
        </li>
        <li>
          <p>SHALL use the <code>substitutionGroup</code> attribute such that it is transitively substitutable for the element <code>structures:Augmentation</code>.</p>
        </li>
      </ol>
      <p>An element that is not an augmentation element SHALL NOT meet either of the above criteria.</p>
    </rule>
    <rule applicability="REF EXT">
      <p>Within the schema, an element definition for an augmentation element MAY contain one or more instances of the element <code>structures:AppliesTo</code> as application information to specify types to which the augmentation element applies.</p>
    </rule>
    <rule applicability="REF EXT">
      <p>Within the schema, an element definition for an augmentation element that does not contain any instances of the element <code>structures:AppliesTo</code> MAY be applied to any object or association type.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>Any type definition referenced by a component within the schema MUST be from one of the following:</p>
      <ol>
        <li>
          <p>The schema being defined.</p>
        </li>
        <li>
          <p>A namespace imported as NIEM-conformant.</p>
        </li>
        <li>
          <p>The XML Schema namespace.</p>
        </li>
        <li>
          <p>The <code>structures</code> namespace.</p>
        </li>
      </ol>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>Any element declaration referenced by a component within the schema MUST be from one of the following:</p>
      <ol>
        <li>
          <p>The schema being defined.</p>
        </li>
        <li>
          <p>A namespace imported as NIEM-conformant.</p>
        </li>
        <li>
          <p>The <code>structures</code> namespace.</p>
        </li>
        <li>
          <p>An external namespace, in accordance with the rules for external schemas as specified by this specification.</p>
        </li>
      </ol>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>Any attribute declaration referenced by a component within the schema MUST be from one of the following:</p>
      <ol>
        <li>
          <p>The schema being defined.</p>
        </li>
        <li>
          <p>A namespace imported as NIEM-conformant.</p>
        </li>
        <li>
          <p>The <code>structures</code> namespace.</p>
        </li>
        <li>
          <p>The XML namespace.</p>
        </li>
        <li>
          <p>An external namespace, in accordance with the rules for external schemas as specified by this specification.</p>
        </li>
      </ol>
    </rule>
    <definition term="structures namespace">
      <p>The <strong>structures namespace</strong> is the namespace represented by the URI <code>
          <q>http://niem.gov/niem/structures/2.0</q>
        </code>.</p>
    </definition>
    <rule applicability="REF EXT">
      <p>The schema MUST import the NIEM <code>structures</code> namespace.</p>
    </rule>
    <rule applicability="REF SUB EXT INS">
      <p>The schema or instance MUST use content within the NIEM <code>structures</code> namespace as specified in this document and ONLY as specified by this document.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>Within the schema, a complex type definition SHALL include the attribute <code>structures:sequenceID</code> if the order of an occurrence of the type, within its parent, relative to its siblings, is meaningful and pertinent and if the schema does not specify the desired sequential order.</p>
    </rule>
    <definition term="reference element">
      <p>A <strong>reference element</strong> is an element that refers to its value by a reference attribute instead of carrying it as content.</p>
    </definition>
    <rule applicability="REF SUB EXT">
      <p>Within the schema, a reference element and only a reference element SHALL be defined to be of type <code>structures:ReferenceType</code>.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>Within the schema, a complex type SHALL NOT be defined such that an instance of that type owns the attribute <code>structures:ref</code>.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>Within the schema, any two elements of the form</p>
      <p>
        <em>NCName</em>
      </p>
      <p>and</p>
      <p>
        <code>
          <em>NCName</em>Reference</code>
      </p>
      <p>where the string value of <em>NCName</em> is the same in both forms, SHALL be defined to have identical semantics. NIEM recognizes no difference in meaning between a reference element and an element that is not a reference element.</p>
    </rule>
    <rule applicability="REF EXT">
      <p>Within the schema, if both elements <em>NCName</em> and <code>
          <em>NCName</em>Reference</code> exist, then the <code>appinfo:ReferenceTarget</code> of any <code>
          <em>NCName</em>Reference</code> element MUST be the type of the element <em>NCName</em>.</p>
    </rule>
    <definition term="external schema">
      <p>An <strong>external schema</strong> is any schema that is not a supporting schema and that is not NIEM-conformant.</p>
    </definition>
    <rule applicability="REF EXT">
      <p>Within the schema, an element <code>xsd:import</code> that imports a namespace defined by an external schema MUST have the application information <code>appinfo:ConformantIndicator</code>, with a value of <code>false</code>.</p>
    </rule>
    <rule applicability="REF EXT">
      <p>Within the schema, an element <code>xsd:import</code> that imports a namespace defined by an external schema MUST be a documented component.</p>
    </rule>
    <definition term="adapter type">
      <p>An <strong>adapter type</strong> is a NIEM-conformant type that adapts external components for use within NIEM. An adapter type creates a new class of object that embodies a single concept composed of external components. A NIEM-conformant schema defines an adapter type.</p>
    </definition>
    <rule applicability="REF EXT">
      <p>Within the schema, an adapter type MUST have application information <code>appinfo:ExternalAdapterTypeIndicator</code> with a value of <code>true</code>. A type that is not an adapter type SHALL NOT contain that indicator.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>Within the schema, an adapter type MUST be an immediate extension of type <code>structures:ComplexObjectType</code>.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>Within the schema, an adapter type MUST be composed of only elements and attributes from an external standard.</p>
    </rule>
    <rule applicability="REF EXT">
      <p>Within the schema, an element reference used in an adapter type definition MUST be a documented component.</p>
    </rule>
    <rule applicability="REF EXT">
      <p>Within the schema, an attribute reference used in an adapter type definition MUST be a documented component.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>Within the schema, an adapter type MUST NOT be extended or restricted.</p>
    </rule>
    <rule applicability="SUB">
      <p>The value of the <code>targetNamespace</code> attribute owned by the <code>xsd:schema</code> document element of the subset schema must be the same as the value of the <code>targetNamespace</code> attribute owned by the <code>xsd:schema</code> document element of the reference schema.</p>
    </rule>
    <rule applicability="SUB">
      <p>The schema must be constructed such that any instance that is XML Schema valid against the schema must also be XML Schema valid against the base schema.</p>
    </rule>
    <rule applicability="INS">
      <p>The XML document MUST be schema-valid, assessed with reference to the schema composed of the reference schemas, extension schemas, exchange schemas, utility schemas, and external schemas for the relevant namespaces.</p>
    </rule>
    <rule applicability="INS">
      <p>Within the instance, the meaning of an element with no content is that additional properties are not asserted. There SHALL NOT be additional meaning interpreted for an element with no content.</p>
    </rule>
    <rule applicability="INS">
      <p>Within an element instance, there SHALL NOT be any difference in meaning between a property asserted via element containment and a property asserted by element reference, except as explicitly described by the semantics of the elements involved.</p>
    </rule>
    <rule applicability="INS">
      <p>Given that the IDREF that is the value of an attribute <code>structures:ref</code> matches the value of an ID attribute on some element in the XML document, that ID attribute must be an occurrence of the attribute <code>structures:id</code>.</p>
    </rule>
    <rule applicability="INS">
      <p>Within an element instance, given that a reference element is restricted to a target type T, any attribute <code>structures:ref</code> MUST reference an element that has a type definition of type T or that is derived from type T.</p>
    </rule>
    <rule applicability="INS">
      <p>The order of elements that are children of an element SHALL be presented as if their sequential order is as follows:</p>
      <ol>
        <li>
          <p>First, elements owning an attribute <code>structures:sequenceID</code>, in the order that would be yielded with their sequence IDs sorted via <code>sort</code> element as defined by <ref idref="XSLT"/>, with a data type of <code>number</code> and an order of <code>ascending</code>.</p>
        </li>
        <li>
          <p>Following those elements, the remaining elements, in the order in which they occur within the XML instance.</p>
        </li>
      </ol>
    </rule>
    <rule applicability="REF EXT INS">
      <p>Within a schema or instance, the attribute <code>structures:sequenceID</code> SHALL NOT be interpreted as meaningful beyond an indicator of sequential order of an object relative to its siblings.</p>
    </rule>
    <rule applicability="INS">
      <p>Within an element instance, when an object O links to a metadata object via an attribute <code>structures:metadata</code>, the information in the metadata object SHALL be applied to the object O.</p>
    </rule>
    <rule applicability="INS">
      <p>Within an element instance, when an object O1 contains an element E, with content object O2 or with a reference to object O2, and O2 links to a metadata object via an attribute <code>structures:linkMetadata</code>, the information in the metadata object SHALL be applied to the relationship E between O1 and O2.</p>
    </rule>
    <rule applicability="INS">
      <p>Given that each IDREF in the value of an attribute <code>structures:metadata</code> must match the value of an ID attribute on some element in the XML document, that ID attribute MUST be an occurrence of the attribute <code>structures:id</code>.</p>
    </rule>
    <rule applicability="INS">
      <p>Each element that an attribute <code>structures:metadata</code> references MUST have a type definition that is derived from <code>structures:MetadataType</code>.</p>
    </rule>
    <rule applicability="INS">
      <p>Given that each IDREF in the value of an attribute <code>structures:linkMetadata</code> must match the value of an ID attribute on some element in the XML document, that ID attribute MUST be an occurrence of the attribute <code>structures:id</code>.</p>
    </rule>
    <rule applicability="INS">
      <p>Each element that an attribute <code>structures:linkMetadata</code> references MUST have a type definition that is derived from structures:MetadataType.</p>
    </rule>
    <rule applicability="INS">
      <p>Given that an element information item E has a type definition of some type T, each metadata type that is the type definition of an element information item referenced by an attribute <code>structures:metadata</code> or <code>structures:linkMetadata</code> on element E MUST be applicable to T.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>Within the schema, a complex type that is a direct extension of a simple type from the XML Schema namespace simple type MAY use the same local name as the simple type if and only if the extension adds no content other than the attribute group <code>structures:SimpleObjectAttributeGroup</code>.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>The name of any XML Schema component defined by the schema SHALL be composed of words from the English language, using the prevalent U.S. spelling, as provided by <ref idref="OED"/>.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>The name of any XML Schema component defined by the schema SHALL contain only the following characters:</p>
      <ul>
        <li>
          <p>Upper-case letters ('<code>A</code>'-'<code>Z</code>').</p>
        </li>
        <li>
          <p>Lower-case letters ('<code>a</code>'-'<code>z</code>').</p>
        </li>
        <li>
          <p>Digits ('<code>0</code>'-'<code>9</code>').</p>
        </li>
        <li>
          <p>Hyphen ('<code>-</code>').</p>
        </li>
      </ul>
      <p>Other characters, such as the underscore (<q>
          <code>_</code>
        </q>) character and the period (<q>
          <code>.</code>
        </q>) character SHALL NOT appear in component names in NIEM-conformant schemas.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>The hyphen character (<q>-</q>) MAY appear in component names only when used as a separator between parts of a single word, phrase, or value, which would otherwise be incomprehensible without the use of a separator.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>Within the schema, any attribute declaration SHALL have a name that begins with a lower-case letter ('<code>a</code>'-'<code>z</code>').</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>Within the schema, any XML Schema component other than an attribute declaration SHALL have a name that begins with an upper-case letter ('<code>A</code>'-'<code>Z</code>').</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>The name of any XML Schema component defined by the schema SHALL use the camel case formatting convention.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>The schema MUST consistently use approved acronyms, abbreviations, and word truncations within defined names. The approved shortened forms are defined in Table 9-1: Abbreviations Used in NIEM Core Names.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>A noun used as a term in the name of an XML Schema component MUST be in singular form unless the concept itself is plural.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>A verb used as a term in the name of an XML Schema component MUST be used in the present tense unless the concept itself is past tense.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>Articles, conjunctions, and prepositions SHALL NOT be used in NIEM component names except where they are required for clarity or by standard convention.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>Except as specified elsewhere in this document, any element or attribute defined within the schema SHALL have a name that takes the form:</p>
      <ul>
        <li>
          <p>Object-class qualifier terms (0 or more).</p>
        </li>
        <li>
          <p>An object class term (1).</p>
        </li>
        <li>
          <p>Property qualifier terms (0 or more).</p>
        </li>
        <li>
          <p>A property term (1).</p>
        </li>
        <li>
          <p>Representation qualifier terms (0 or more).</p>
        </li>
        <li>
          <p>A representation term (1).</p>
        </li>
      </ul>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>The object-class term of a NIEM component SHALL consist of a term identifying a category of concrete concepts or entities.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>A property term SHALL describe or represent a characteristic or subpart of an entity or concept.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>Multiple qualifier terms MAY be used within a component name as necessary to ensure clarity and uniqueness within its namespace and usage context.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>The number of qualifier terms SHOULD be limited to the absolute minimum required to make the component name unique and understandable.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>The order of qualifiers SHALL NOT be used to differentiate names.</p>
    </rule>
    <rule applicability="REF EXT">
      <p>If any word in the representation term is redundant with any word in the property term, one occurrence SHOULD be deleted.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>Within the schema, the name of an element declaration that is of simple content MUST use a representation term found in Table 9-2: Representation Terms.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>Within the schema, the name of an element declaration that is of complex content, and that corresponds to a concept listed in Table 9-2: Representation Terms, MUST use a representation term from that table.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>Within the schema, the name of an element declaration that is of complex content and that does not correspond to a concept listed in Table 9-2: Representation Terms MUST NOT use a representation term.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>Within the schema, the name of an attribute declaration MUST use a representation term from Table 9-2: Representation Terms.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>Within the schema, the name of any type definition MUST use the representation term <code>Type</code>.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>Within the schema, the name of any simple type definition SHALL use the representation term qualifier <code>Simple</code>. This qualifier SHALL appear after any other representation term qualifiers.</p>
    </rule>
    <definition term="code type">
      <p>A <strong>code type</strong> is a simple type schema component definition that contains multiple <code>xsd:enumeration</code> facets.</p>
    </definition>
    <rule applicability="REF SUB EXT">
      <p>Within the schema, the name of any code type SHALL use the representation term qualifier <code>Code</code>.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>Within the schema, any type definition which has a base type definition of a code type or which is transitively based on a code type SHALL have a name that uses the representation term qualifier <code>Code</code>.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>Within the schema, any association type SHALL have a name that uses the representation term qualifier <code>Association</code>. Types other than association types SHALL NOT use the representation term qualifier <code>Association</code>.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>Within the schema, any augmentation type SHALL have a name that uses the representation term qualifier <code>Augmentation</code>. Types other than augmentation types SHALL NOT use the representation term qualifier <code>Augmentation</code>.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>Within the schema, any metadata type SHALL have a name that uses the representation term qualifier <code>Metadata</code>. Types other than metadata types SHALL NOT use the representation term qualifier <code>Metadata</code>.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>Within the schema, the name of any attribute group definition schema component SHALL use the representation term <code>AttributeGroup</code>.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>Within the schema, the name of any reference element SHALL use the representation term suffix <code>Reference</code>.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>Within the schema, the name of an association element SHALL use the representation term qualifier <code>Association</code>.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>Within the schema, the name of an augmentation element SHALL use the representation term Augmentation.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>Within the schema, the name of a metadata element SHALL use the representation term <code>Metadata</code>.</p>
    </rule>
    <rule applicability="REF SUB EXT">
      <p>Within the schema, the name of a role SHALL use the property term <code>RoleOf</code>.</p>
    </rule>
  </section>
  <section>
    <title>Pushed-off rules</title>
    <definition term="NIEM-conformant schema">
      <p>An XML Schema document is a <strong>NIEM-conformant schema</strong> if and only if it is a reference schema, a subset schema, an extension schema, an exchange schema, or a constraint schema.</p>
    </definition>
    <definition term="NIEM-conformant component">
      <p>A <strong>NIEM-conformant component</strong> is an XML Schema component that is defined by a reference schema, an extension schema, or an exchange schema.</p>
    </definition>
    <definition term="reference schema">
      <p>A reference schema is an XML Schema document that meets all of the following criteria:</p>
      <ul>
        <li>
          <p>It is explicitly designated as a reference schema. This may be declared by an IEPD catalog or by a tool-specific mechanism outside the schema.</p>
        </li>
        <li>
          <p>It provides the broadest, most fundamental definitions of components in its namespace.</p>
        </li>
        <li>
          <p>It provides the authoritative definition of business semantics for components in its namespace.</p>
        </li>
        <li>
          <p>It is intended to serve as the basis for components in IEPD schemas, including subset schemas, constraint schemas, extension schemas, and exchange schemas.</p>
        </li>
        <li>
          <p>It satisfies all rules specified in the Naming and Design Rules for reference schemas.</p>
        </li>
      </ul>
    </definition>
    <definition term="subset schema">
      <p>A subset schema is an XML Schema document that meets all of the following criteria:</p>
      <ul>
        <li>
          <p>It is explicitly designated as a subset schema. This may be declared by an IEPD catalog or by a tool-specific mechanism outside the schema.</p>
        </li>
        <li>
          <p>It has a target namespace previously defined by a reference schema. That is, it does not provide original definitions for schema components, but instead provides an alternate schema representation of components that are defined by a reference schema.</p>
        </li>
        <li>
          <p>It does not alter the business semantics of components in its namespace. The reference schema defines these business semantics.</p>
        </li>
        <li>
          <p>It is intended to express the limited vocabulary necessary for an IEPD and to support XML Schema validation for an IEPD.</p>
        </li>
        <li>
          <p>It satisfies all rules specified in the Naming and Design Rules for subset schemas.</p>
        </li>
      </ul>
    </definition>
    <definition term="extension schema">
      <p>An extension schema is an XML Schema document that meets all of the following criteria:</p>
      <ul>
        <li>
          <p>It is explicitly designated as an extension schema. This may be declared by an IEPD catalog or by a tool-specific mechanism outside the schema.</p>
        </li>
        <li>
          <p>It provides the broadest, most fundamental definitions of components in its namespace.</p>
        </li>
        <li>
          <p>It provides the authoritative definition of business semantics for components in its namespace.</p>
        </li>
        <li>
          <p>It contains components that, when appropriate, use or are derived from the components in reference schemas or exchange schemas. When a reference schema contains relevant components, it is preferred to an exchange schema.</p>
        </li>
        <li>
          <p>It is intended to express the additional vocabulary required for an IEPD, above and beyond the vocabulary available from reference schemas, and to support XML Schema validation for an IEPD.</p>
        </li>
        <li>
          <p>It satisfies all rules specified in the Naming and Design Rules for extension schemas.</p>
        </li>
      </ul>
    </definition>
    <definition term="exchange schema">
      <p>An exchange schema is an XML Schema document that meets all of the following criteria:</p>
      <ul>
        <li>
          <p>It is explicitly designated as an exchange schema. This may be declared by an IEPD catalog or by a tool-specific mechanism outside the schema.</p>
        </li>
        <li>
          <p>It provides the broadest, most fundamental definitions of components in its namespace.</p>
        </li>
        <li>
          <p>It provides the authoritative definition of business semantics for components in its namespace.</p>
        </li>
        <li>
          <p>It contains components that use or are derived from the components in reference schemas or exchange schemas.</p>
        </li>
        <li>
          <p>It is intended to identify and define the document element information item for a particular information exchange that is described by an IEPD.</p>
        </li>
        <li>
          <p>It satisfies all rules specified in the Naming and Design Rules for exchange schemas.</p>
        </li>
      </ul>
    </definition>
    <definition term="constraint schema">
      <p>A constraint schema is an XML Schema document that meets all of the following criteria:</p>
      <ul>
        <li>
          <p>It is explicitly designated as a constraint schema. This may be declared by an IEPD catalog or by a tool-specific mechanism outside the schema.</p>
        </li>
        <li>
          <p>It contains XML Schema components that exist for the purpose of (1) determining schema-validity of XML documents according to some criteria not easily expressed in other classes of schema documents, and (2) expressing those criteria in the XML Schema definition language.</p>
        </li>
        <li>
          <p>It has a target namespace previously defined by a reference schema, extension schema, or exchange schema, or it is intended to support a constraint schema that does have such a target namespace.</p>
        </li>
        <li>
          <p>It is intended to express business rules for a class of XML documents, not the semantics of those XML documents.</p>
        </li>
        <li>
          <p>It satisfies all rules specified in the Naming and Design Rules for constraint schemas.</p>
        </li>
      </ul>
    </definition>
    <definition term="NIEM-conformant XML document">
      <p>A NIEM-conformant XML document is an XML document that satisfies all of the following criteria:</p>
      <ul>
        <li>
          <p>The document element is locally schema-valid.</p>
        </li>
        <li>
          <p>Each element information item within the XML document that has a namespace name matching the target namespace of a reference schema, extension schema, or exchange schema is a NIEM-conformant element information item.</p>
        </li>
      </ul>
    </definition>
    <definition term="NIEM-conformant element information item">
      <p>A NIEM-conformant element information item is an element information item that satisfies all of the following criteria:</p>
      <ul>
        <li>
          <p>Its namespace name and local name matches an element declared by a reference schema, extension schema, or exchange schema.</p>
        </li>
        <li>
          <p>It occurs within a NIEM-conformant XML document.</p>
        </li>
        <li>
          <p>It is locally schema-valid.</p>
        </li>
        <li>
          <p>It satisfies all rules specified in the Naming and Design Rules for NIEM-conformant element information items.</p>
        </li>
      </ul>
    </definition>
    <principle>
      <p>This specification SHOULD specify what is necessary for semantic interoperability and no more.</p>
    </principle>
    <principle>
      <p>This specification SHOULD focus on providing rules for specifying schemas.</p>
    </principle>
    <principle>
      <p>This specification SHOULD feature rules thatare as specific, precise, and concise as possible.</p>
    </principle>
    <principle>
      <p>The content of a NIEM-conformant data instance SHOULD NOT be modified by processing against XML Schema documents.</p>
    </principle>
    <principle>
      <p>NIEM-conformant schemas and NIEM-conformant XML documents SHOULD use XML Schema validating parsers for validation of XML content.</p>
    </principle>
    <principle>
      <p>Systems that use NIEM-conformant data SHOULD mark as invalid data that does not conform to the rules defined by applicable XML Schema documents.</p>
    </principle>
    <principle>
      <p>Constraints on XML instances MAY be validated by multiple schema validation passes, using multiple schemas for a single namespace.</p>
    </principle>
    <principle>
      <p>Each NIEM-conformant namespace SHOULD be defined by exactly one reference schema.</p>
    </principle>
    <principle>
      <p>NIEM-conformant schemas SHOULD NOT specify data that uses mixed content.</p>
    </principle>
    <principle>
      <p>NIEM-conformant schemas SHOULD NOT use or define local or anonymous components, as they adversely affect reuse.</p>
    </principle>
    <principle>
      <p>NIEM-conformant components SHOULD NOT incorporate wildcards unless absolutely necessary, as they hinder standardization by encouraging use of nonstandardized data rather than standardized data.</p>
    </principle>
    <principle>
      <p>Schema locations specified within NIEM-conformant reference schemas SHOULD be interpreted as hints and as default values by processing applications.</p>
    </principle>
    <principle>
      <p>NIEM standards and schemas SHOULD leverage and enable use of other open standards.</p>
    </principle>
    <principle>
      <p>NIEM-conformant instances and schemas SHOULD reuse components from NIEM distribution schemas when possible.</p>
    </principle>
    <principle>
      <p>A component SHOULD be identified by its local name together with its namespace. A namespace SHOULD be a required part of the name of a component. A component<char name="rsquo"/>s local name SHOULD NOT imply a relationship to components with similar names from other namespaces.</p>
    </principle>
    <principle>
      <p>NIEM-conformant schemas and standards SHOULD be designed to encourage and ease extension and augmentation by users and developers outside the standardization process.</p>
    </principle>
    <principle>
      <p>XML data SHOULD be designed for automatic processing. XML data SHOULD NOT be designed for literal presentation to people. NIEM standards and schemas SHOULD NOT use literal presentation to people as a design criterion.</p>
    </principle>
    <principle>
      <p>NIEM SHOULD NOT depend on specific software packages, software frameworks, or software systems for interpretation of XML instances.</p>
    </principle>
    <principle>
      <p>NIEM schemas and standards SHOULD be designed such that software systems that use NIEM may be built with a variety of off-the-shelf and free software products.</p>
    </principle>
    <principle>
      <p>A data component definition SHOULD be drafted before the associated data element name is composed.</p>
    </principle>
    <principle>
      <p>Components in NIEM SHOULD be given names that are consistent with names of other NIEM components. Such names SHOULD be based on simple rules.</p>
    </principle>
    <principle>
      <p>Component definitions in NIEM-conformant schemas SHOULD reflect real-world concepts.</p>
    </principle>
    <principle>
      <p>Component definitions in NIEM-conformant schemas SHOULD have semantic consistency.</p>
    </principle>
    <principle>
      <p>Complex type definitions in NIEM-conformant schemas SHOULD use type inheritance only for specialization.</p>
    </principle>
    <principle>
      <p>Multiple components with identical or undifferentiated semantics SHOULD NOT be defined. Component definitions SHOULD have clear, explicit distinctions.</p>
    </principle>
    <principle>
      <p>NIEM-conformant schemas SHOULD have the simplest possible structure, content, and architecture consistent with real business requirements.</p>
    </principle>
    <principle>
      <p>Components defined by NIEM-conformant schemas SHOULD be defined appropriate for their scope.</p>
    </principle>
    <principle>
      <p>XML namespaces defined by NIEM-conformant schemas SHOULD encapsulate data components that are coherent, consistent, and internally related as a set. A namespace SHOULD encapsulate components that tend to change together.</p>
    </principle>

    <rule applicability="REF SUB EXT">
      <p>A NIEM component name SHALL be formed by applying the informative
      guidelines and examples detailed in Annex A of <ref idref="ISO11179Part5"/>, with 
      exceptions as specified in this
      document, most notably those specified in Section 9, Naming Rules.</p>
    </rule>

  </section>
  <section>
    <title>Deleted rules</title>
    
    <rule applicability="REF SUB EXT">
      <p>Within the schema, an element declaration that is of complex content SHALL
      NOT own the attribute <code>mixed</code> with the value <code>true</code>.</p>
    </rule>

  </section>


    <reference id="ISO11179Part5">
      <p>ISO/IEC 11179-5:2005, Information technology <char name="mdash"/> Metadata registries (MDR) <char name="mdash"/> Part 5: Naming and identification principles. Available from <link>http://standards.iso.org/ittf/PubliclyAvailableStandards/c035347_ISO_IEC_11179-5_2005(E).zip</link>.</p>
    </reference>
    <reference id="OED">
      <p>Oxford English Dictionary, Second Edition, 1989. Available from <link>http://dictionary.oed.com/</link>.</p>
    </reference>
    <reference id="RFC3986">
      <p>Berners-Lee, T., et al.: Uniform Resource Identifier (URI): Generic Syntax, Request for Comments 3986, January 2005. Available from <link>http://www.ietf.org/rfc/rfc3986.txt</link>.</p>
    </reference>
    <reference id="XMLInfoSet">
      <p>XML Information Set (Second Edition), W3C Recommendation 4 February 2004. Available from <link>http://www.w3.org/TR/2004/REC-xml-infoset-20040204/</link>.</p>
    </reference>
    <reference id="XSLT">
      <p>XSL Transformations (XSLT), Version 1.0, W3C Recommendation 16 November 1999. Available from <link>http://www.w3.org/TR/1999/REC-xslt-19991116/</link>.</p>
      <p>The element <code>xsl:sort</code> is described at <link href="http://www.w3.org/TR/1999/REC-xslt-19991116/#element-sort">#element-sort</link>.</p>
    </reference>

INTERPRETATION RULES

    <rule applicability="EXT">
      <p>The use of <code>xsd:choice</code> SHALL define syntax, structure, grouping, and cardinality of instances, but SHALL NOT define semantics. The semantics of a property within an <code>xsd:choice</code> SHALL be identical to the semantics of the property within an <code>xsd:sequence</code>.</p>
    </rule>

